{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13760\viewh22940\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 normalization and boundary can be set later\
nModes, however, may be used to change how big the EVP is. Right?\
\
BaseClass\
\
// designated initializer\
// rho/zIn pair are required, because all numerical data has to be gridded somehow, even if generated from a function\
func init(Lz, zOut, latitude, nModes, nEVP)\
\{\
\
\} \
\
// convenience initializer\
func initWithFunction()\
\{\
	create grid, then call designated initializer\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 // convenience initializer\
func initWithGrid()\
\{\
	call designated initializer\
\}\
\
FiniteDifference\
\
- zGrid\
- rho_zGrid\
- N2_zGrid\
- diff1_zGrid\
- diff2_zGrid\
- T_out\
\
func init(rhoIn, zIn, Lz, zOut, latitude,orderOfAccuracy)\
\{\
	self. orderOfAccuracy = orderOfAccuracy\
	super.init()\
\} \
\
repeat the convenience initializers\
\
Spectral\
\
func init(rho_zLobatto, zLobatto, Lz, zOut, latitude)\
\{\
	self. rho_zLobatto = rho_zLobatto\
	self. zLobatto = zLobatto\
\
	// set the other properties\
	self.SetupZDerivativeQuantities(zLobatto, rho_zLobatto, zOut)\
	self.SetupEigenvalueProblem(zLobatto, rho_zLobatto, zOut)\
\
	super.init( Lz, zOut, latitude )\
\} \
\
repeat the convenience initializers\
\
WKBSpectral\
\
func init(xiLobatto, z_xiLobatto, xiOut, rho_zLobatto, zLobatto, Lz, zOut, latitude)\
\{\
	self. rho_zLobatto = rho_zLobatto\
	self. zLobatto = zLobatto\
\
	// set the other properties\
	self.SetupZDerivativeQuantities(zLobatto, rho_zLobatto, zOut)\
	self.SetupEigenvalueProblem(zLobatto, rho_zLobatto, zOut)\
\
	super.init( Lz, zOut, latitude )\
\} }